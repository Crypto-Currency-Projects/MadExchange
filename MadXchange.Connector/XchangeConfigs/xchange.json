{
  "ExchangeDescriptors": {
    "ByBit": {
      "Name": "ByBit",
      "Socket": {
        "SocketUrl": "wss://stream-testnet.bybit.com/realtime",
        "AuthtUrl": "{SocketUrl}?api_key={ApiKey}&expires={ExpiresTime}&signature={Signature}",
        "ExpiresTime": "{UnixMS}+1000",
        "Signature": "GET/realtime{ExpiresTime}",
        "KeepAlive": 15,
        "Types": {
          "Request": {
            "op": "{SocketMethod}",
            "args": "Args",
            "Types": {
              "Auth": {
                "op": "auth",
                "args": [ "{ApiKey}", "{ExpiresTime}", "{Signature}" ]
              },
              "Ping": {
                "op": "ping",
                "args": []
              },
              "Subscription": {
                "op": "subscribe",
                "args": [ "{Channel}", "{Channel}.{Filter}", "{Channel}.{Filter}.{Resolution}|{Resolution}" ],
                "Topic": {
                  "Position": "position",
                  "Instrument": "instrument_info",
                  "OrderBook": "orderBook_200",
                  "Order": "order",
                  "Execution": "execution"
                }
              }
            }
          },
          "Response": {
            "success": "IsSuccess",
            "ret_msg": "RetMessage",
            "request": "{Request}"


          },
          "Message": {
            "topic": "{Topic}",
            "action": "{DataType}",
            "type": "{DataType}",
            "data": "{SocketData}"
          },
          "SocketData": [
            "{DomainData}",
            {
              "delete": [ "{DomainData}" ],
              "update": [ "{DomainData}" ],
              "insert": [ "{DomainData}" ]
            }
          ]
        },

        "Fields": {
          "DataType": {
            "snapshot": "SnapShot",
            "delta": "Delta",
            "update": "Update"
          },
          "Resolution": [ "100ms", "1m", "3m" ],
          "Delta": {
            "insert": "Insert",
            "update": "Update",
            "delete": "Delete"
          },
          "SocketOperation": {
            "auth": "Auth",
            "subscribe": "Subscribe",
            "unsubscribe": "Unsubscribe",
            "ping": "Ping"

          }
        }
      },
      "BaseUrl": "https://api-testnet.bybit.com",
      "ApiKeyString": "api_key",
      "SignString": "sign",
      "TimeStampString": "timestamp",
      "DomainTypes": 
      {
        "OrderBook": {
          "symbol": "Symbol",
          "id": "Id",
          "Side": "Side",
          "price": "Price",
          "size": "Size"
        },
        "Instrument": {
          "id": "Id",
          "symbol": "Symbol", //instrument name
          "last_price_e4": "LastPrice", //the latest price
          "ask_price": "AskPrice",
          "bid_price": "BidPrice",
          "last_tick_direction": "LastTickDirection", //the direction of last tick:PlusTick,ZeroPlusTick,MinusTick,ZeroMinusTick
          "prev_price_24h_e4": "PrevPrice24", //the price of prev 24h
          "price_24h_pcnt_e6": "", //the current lastprice percentage change from prev 24h price
          "high_price_24h_e4": "HighPrice24", //the highest price of prev 24h
          "low_price_24h_e4": "LowPrice24", //the lowest price of prev 24h
          "prev_price_1h_e4": "PrevPrice1h", //the price of prev 1h
          "price_1h_pcnt_e6": "", //the current lastprice percentage change from prev 1h price
          "mark_price_e4": "MarkPrice", //mark price
          "index_price_e4": "IndexPrice", //index price
          "open_interest": "OpenInterest", //open interest quantity - Attention, the update is not immediate - slowest update is 1 minute
          "open_value_e8": "OpenValue", //open value quantity - Attention, the update is not immediate - the slowest update is 1 minute
          "total_turnover_e8": "TotalTurnover", //total turnover
          "turnover_24h_e8": "Turnover24", //24h turnover
          "total_volume": "TotalVolume", //total volume
          "volume_24h": "Volume24", //24h volume
          "funding_rate_e6": "FundingRate", //funding rate
          "predicted_funding_rate_e6": "PredictedFundingRate", //predicted funding rate
          "cross_seq": "", //sequence
          "created_at": "CreatedAt",
          "updated_at": "UpdatedAt",
          "next_funding_time": "NextFundingTime", //next funding time
          "countdown_hour": ""
        },
        "Position": {
          "user_id": "UserId", // user ID
          "symbol": "Symbol", // the contract for this position
          "size": "CurrentQty", // the current position amount
          "side": "OrderSide", // side
          "position_value": "PositionValue", // positional value
          "entry_price": "EntryPrice", // entry price
          "liq_price": "LiquidationPrice", // liquidation price
          "bust_price": "BustPrice", // bankruptcy price
          "leverage": "Leverage", // leverage
          "order_margin": "OrderMargin", // order margin
          "position_margin": "PositionMargin", // position margin
          "available_balance": "AvailableBalance", // available balance
          "take_profit": "", // take profit price           
          "tp_trigger_by": "", // take profit trigger price, eg: LastPrice, IndexPrice. Conditional order only
          "stop_loss": "", // stop loss price
          "sl_trigger_by": "", // stop loss trigger price, eg: LastPrice, IndexPrice. Conditional order only
          "realised_pnl": "RealisedPnl", // realised PNL
          "trailing_stop": "", // trailing stop points
          "wallet_balance": "WalletBalance", // wallet balance
          "risk_id": "",
          "occ_closing_fee": "ClosingFee", // position closing
          "occ_funding_fee": "FundingFee", // funding fee
          "auto_add_margin": "", // auto margin replenishment switch
          "cum_realised_pnl": "CumRealisedPnl", // Total realized profit and loss
          "position_status": "", // status of position (Normal:normal Liq:in the process of liquidation Adl:in the process of Auto-Deleveraging)        
          "position_seq": ""

        },
        "Execution": {
          "symbol": "Symbol",
          "side": "OrderSide",
          "order_id": "OrderId",
          "exec_id": "ExecId",
          "order_link_id": "OrderLinkId",
          "price": "Price",
          "exec_qty": "ExecQty",
          "exec_fee": "ExecFee",
          "leaves_qty": "LeavesQty",
          "is_maker": "IsMaker",
          "trade_time": "TradeTime"
        },
        "Order": {
          "order_id": "OrderId",
          "order_link_id": "OrderLinkId",
          "symbol": "Symbol",
          "side": "OrderSide",
          "order_type": "OrderType",
          "price": "Price",
          "qty": "OrderQty",
          "time_in_force": "TimeinForce",
          "create_type": "",
          "cancel_type": "",
          "order_status": "OrderStatus",
          "leaves_qty": "LeavesQty",
          "cum_exec_qty": "CumQty",
          "cum_exec_value": "CumValue",
          "cum_exec_fee": "CumFee",
          "timestamp": "XTimestamp"
        },
        "WalletHistory": {

        },
        "OrderSide": {
          "buy": "Long",
          "sell": "Short"
        },
        "OrderStatus": {
          "created": "Created",
          "new": "New",
          "partially_filled": "PartiallyFilled",
          "filled": "Filled",
          "cancelled": "Cancelled",
          "pending_cancel": "PendingCancel",
          "rejected": "Rejected"
        },
        "OrderType": {
          "limit": "Limit",
          "market": "Market"
        },
        "TimeInForce": {
          "immediate_or_cancel": "ImmediateOrCancel",
          "good_till_cancel": "GoodTillCancel",
          "fill_or_kill": "FillOrKill",
          "post_only": "PostOnly"
        }
      },
      "Routes": {
        "Get": {
          "Instrument": {
            "Url": "/v2/public/tickers",
            "Parameter": {
              "symbol": {
                "Domain": "Symbol",
                "Required": false
              }
            },
            "Result": "Instrument"
          },
          //"Symbols": {///lets check socket first, maybe not neccessary
          //  "Url": "/v2/public/symbols",
          //  "Parameter": {
          //    "symbol": {
          //      "Required": false
          //    }
          //  }
          //},
          "PositionList": {
            "Url": "/position/list",
            "Result": "Position"
          },
          "OrderBook": {
            "Url": "/v2/public/orderBook/L2",
            "Parameter": {
              "symbol": {
                "Domain": "Symbol",
                "Required": true
              }
            },
            "Result": "OrderBookL2"
          },
          "Order": {
            "Url": "/v2/private/order",
            "Parameter": {
              "order_id": {
                "Domain": "OrderId",
                "Required": false
              },
              "order_link_id": {
                "Domain": "OrderLinkId",
                "Required": false
              },
              "symbol": {
                "Domain": "Symbol",
                "Required": true
              }
            }
          },
          "Position": {
            "Url": "/v2/private/position/list",
            "Parameter": {
              "symbol": {
                "Domain": "Symbol",
                "Required": false
              }
            },
            "Result": "Position"
          },
          "Margin": { //balance is in positiondto
            "Url": "/v2/private/position/list",
            "Parameter": {
              "symbol": {
                "Domain": "Symbol",
                "Required": false
              }
            },
            "Result": "Margin"
          },
          "Leverage": {
            "Url": "/user/leverage",
            "Result": "Leverage"
          },
          "WalletFund": {
            "Url": "/open-api/wallet/fund/records",
            "Result": "WalletHistory"
          },
          "WalletWithdraw": {

            "Url": "/open-api/wallet/withdraw/list",
            "Result": "WalletHistory"
          }
          //"Identity": {
          //  "Url": "/open-api/api-key",
          //  "Result": "ApiKey"

        },
        "Post": {
          "PlaceOrder": {
            "Url": "/v2/private/order/create",
            "Parameter": {

              "order_type": {
                "Domain": "OrderType",
                "Type": "OrderType",
                "Required": true
              },
              "order_link_id": {
                "Domain": "OrderLinkId",
                "Required": false
              },
              "price": {
                "Domain": "Price",
                "Required": false
              },
              "qty": {
                "Domain": "OrderQty",
                "Required": true
              },
              "reduce_only": {
                "Domain": "ReduceOnly",
                "Required": false
              },
              "side": {
                "Domain": "Side",
                "Type": "OrderSide",
                "Required": true
              },
              "symbol": {
                "Domain": "Symbol",
                "Required": true
              },
              "time_in_force": {
                "Domain": "TimeInForce",
                "Type": "TimeInForce",
                "Required": true
              }


            },
            "Result": "Order"
          }, //paramer: side[Required], symbol[Required], order_type[Required], qty[Required], price[Required with Type limit], time_in_force[Required], reduce_only, order_link_id
          "UpdateOrder": {
            "Url": "/open-api/order/replace",
            "Parameter": {
              "price": {
                "Domain": "Price",
                "Required": false
              },
              "qty": {
                "Domain": "OrderQty",
                "Required": false
              },
              "side": {
                "Domain": "Side",
                "Type": "OrderSide",
                "Required": true
              },
              "symbol": {
                "Domain": "Symbol",
                "Required": false
              }

            },
            "Result": "Order"
          }, //Parameter:
          "CancelAllOrder": {
            "Url": "/v2/private/order/cancelAll",
            "Parameter": {
              "symbol": {
                "Domain": "Symbol",
                "Required": false
              }
            },
            "Result": "Order[]"
          }, //Parameter:  symbol[Required]
          "CancelOrder": {
            "Url": "/v2/private/order/cancel", //paramer: symbol[Required], order_id, order_link_id
            "Parameter": {
              "symbol": {
                "Domain": "Symbol",
                "Required": true
              },
              "orderid": {
                "Domain": "OrderId",
                "Required": true
              }
            },
            "Result": "Order"
          },
          "Leverage": {
            "Url": "/user/leverage/save",
            "Parameter": {
              "symbol": {
                "Domain": "Symbol",
                "Required": true
              },
              "leverage": {
                "Domain": "Leverage",
                "Required": true
              }
            },
            "Result": "Leverage"
          }
        } //Parameter: symbol[Required], leverage[Required]
      }
    }
    //"FTX": {

    //  "Name": "FTX",
    //  "Socket": {
    //    "SocketUrl": "wss://stream-testnet.bybit.com/realtime",
    //    "AuthtUrl": "{SocketUrl}?api_key={ApiKey}&expires={ExpiresTime}&signature={Signature}",
    //    "ExpiresTime": "{UnixMS}+1000",
    //    "Signature": "GET/realtime{ExpiresTime}",
    //    "KeepAlive": 15,
    //    "Types": {
    //      "Request": {
    //        "op": "{SocketMethod}",
    //        "args": "Args",
    //        "Types": {
    //          "Auth": {
    //            "op": "auth",
    //            "args": [ "{ApiKey}", "{ExpiresTime}", "{Signature}" ]
    //          },
    //          "Ping": {
    //            "op": "ping",
    //            "args": []
    //          },
    //          "Subscription": {
    //            "op": "subscribe",
    //            "args": [ "{Channel}", "{Channel}.{Filter}", "{Channel}.{Filter}.{Resolution}|{Resolution}" ],
    //            "Topic": {
    //              "Position": "position",
    //              "Instrument": "instrument_info.{Resolution}.{Symbol}",
    //              "Order": "order",
    //              "Execution": "execution"
    //            }
    //          }
    //        }
    //      },
    //      "Response": {
    //        "success": "IsSuccess",
    //        "ret_msg": "RetMessage",
    //        "request": "{Request}"


    //      },
    //      "Message": {
    //        "topic": "{Topic}",
    //        "action": "{DataType}",
    //        "type": "{DataType}",
    //        "data": "{SocketData}"
    //      },
    //      "SocketData": [
    //        "{DomainData}",
    //        {
    //          "delete": [ "{DomainData}" ],
    //          "update": [ "{DomainData}" ],
    //          "insert": [ "{DomainData}" ]
    //        }
    //      ]
    //    },

    //    "Fields": {
    //      "DataType": {
    //        "snapshot": "SnapShot",
    //        "delta": "Delta",
    //        "update": "Update"
    //      },
    //      "Resolution": [ "100ms", "1m", "3m" ],
    //      "Delta": {
    //        "insert": "Insert",
    //        "update": "Update",
    //        "delete": "Delete"
    //      },
    //      "SocketOperation": {
    //        "auth": "Auth",
    //        "subscribe": "Subscribe",
    //        "unsubscribe": "Unsubscribe",
    //        "ping": "Ping"

    //      }
    //    }
    //  },
    //  "BaseUrl": "https://ftx.com/api",
    //  "DomainTypes": {
    //    "Instrument": {
    //      "ask": "AskPrice",
    //      "bid": "BidPrice",
    //      "change1h": "",
    //      "change24h": "",
    //      "changeBod": "",
    //      "volumeUsd24h": "Volume24h",
    //      "volume": "TotalVolume",
    //      "description": "",
    //      "enabled": "",
    //      "expired": "",
    //      "expiry": "Expired",
    //      "index": "IndexPrice",
    //      "last": "LastPrice",
    //      "lowerBound": "LowPrice",
    //      "mark": "MarkPrice",
    //      "name": "Symbol",
    //      "perpetual": "",
    //      "postOnly": "PostOnly",
    //      "priceIncrement": "PriceChange",
    //      "sizeIncrement": "",
    //      "underlying": "BaseCurrency",
    //      "upperBound": "HighPrice",
    //      "type": "future"
    //    },
    //    "Position": {
    //      "user_id": "UserId", // user ID
    //      "symbol": "Symbol", // the contract for this position
    //      "size": "CurrentQty", // the current position amount
    //      "side": "OrderSide", // side
    //      "position_value": "PositionValue", // positional value
    //      "entry_price": "EntryPrice", // entry price
    //      "liq_price": "LiquidationPrice", // liquidation price
    //      "bust_price": "BustPrice", // bankruptcy price
    //      "leverage": "Leverage", // leverage
    //      "order_margin": "OrderMargin", // order margin
    //      "position_margin": "PositionMargin", // position margin
    //      "available_balance": "AvailableBalance", // available balance
    //      "take_profit": "", // take profit price           
    //      "tp_trigger_by": "", // take profit trigger price, eg: LastPrice, IndexPrice. Conditional order only
    //      "stop_loss": "", // stop loss price
    //      "sl_trigger_by": "", // stop loss trigger price, eg: LastPrice, IndexPrice. Conditional order only
    //      "realised_pnl": "RealisedPnl", // realised PNL
    //      "trailing_stop": "", // trailing stop points
    //      "wallet_balance": "WalletBalance", // wallet balance
    //      "risk_id": "",
    //      "occ_closing_fee": "ClosingFee", // position closing
    //      "occ_funding_fee": "FundingFee", // funding fee
    //      "auto_add_margin": "", // auto margin replenishment switch
    //      "cum_realised_pnl": "CumRealisedPnl", // Total realized profit and loss
    //      "position_status": "", // status of position (Normal:normal Liq:in the process of liquidation Adl:in the process of Auto-Deleveraging)        
    //      "position_seq": ""

    //    },
    //    "Execution": {
    //      "symbol": "Symbol",
    //      "side": "OrderSide",
    //      "order_id": "OrderId",
    //      "exec_id": "ExecId",
    //      "order_link_id": "OrderLinkId",
    //      "price": "Price",
    //      "exec_qty": "ExecQty",
    //      "exec_fee": "ExecFee",
    //      "leaves_qty": "LeavesQty",
    //      "is_maker": "IsMaker",
    //      "trade_time": "XTimestamp"
    //    },
    //    "Order": {
    //      "order_id": "OrderId",
    //      "order_link_id": "OrderLinkId",
    //      "symbol": "Symbol",
    //      "side": "OrderSide",
    //      "order_type": "OrderType",
    //      "price": "Price",
    //      "qty": "OrderQty",
    //      "time_in_force": "TimeinForce",
    //      "create_type": "",
    //      "cancel_type": "",
    //      "order_status": "OrderStatus",
    //      "leaves_qty": "LeavesQty",
    //      "cum_exec_qty": "CumQty",
    //      "cum_exec_value": "CumValue",
    //      "cum_exec_fee": "CumFee",
    //      "timestamp": "XTimestamp"
    //    },
    //    "OrderSide": {
    //      "buy": "Long",
    //      "sell": "Short"
    //    },
    //    "OrderStatus": {
    //      "created": "Created",
    //      "new": "New",
    //      "partially_filled": "PartiallyFilled",
    //      "filled": "Filled",
    //      "cancelled": "Cancelled",
    //      "pending_cancel": "PendingCancel",
    //      "rejected": "Rejected"
    //    },
    //    "OrderType": {
    //      "limit": "Limit",
    //      "market": "Market"
    //    },
    //    "TimeInForce": {
    //      "immediate_or_cancel": "ImmediateOrCancel",
    //      "good_till_cancel": "GoodTillCancel",
    //      "fill_or_kill": "FillOrKill",
    //      "post_only": "PostOnly"
    //    }
    //  },
    //  "Routes": {
    //    "Get": {
    //      "Instrument": {
    //        "Url": "/v2/public/tickers",
    //        "Parameter": {
    //          "symbol": {
    //            "Required": false
    //          }
    //        },
    //        "Result": "Instrument"
    //      },
    //      //"Symbols": {///lets check socket first, maybe not neccessary
    //      //  "Url": "/v2/public/symbols",
    //      //  "Parameter": {
    //      //    "symbol": {
    //      //      "Required": false
    //      //    }
    //      //  }
    //      //},
    //      "PositionList": {
    //        "Url": "/position/list",
    //        "Result": "Position"
    //      },
    //      "OrderBook": {
    //        "Url": "/v2/public/orderBook/L2",
    //        "Parameter": {
    //          "symbol": {
    //            "Domain": "Symbol",
    //            "Required": true
    //          }
    //        },
    //        "Result": "OrderBookL2"
    //      },
    //      "Order": {
    //        "Url": "/v2/private/order",
    //        "Parameter": {
    //          "order_id": {
    //            "Domain": "OrderId",
    //            "Required": false
    //          },
    //          "order_link_id": {
    //            "Domain": "OrderLinkId",
    //            "Required": false
    //          },
    //          "symbol": {
    //            "Domain": "Symbol",
    //            "Required": true
    //          }
    //        }
    //      },
    //      "Position": {
    //        "Url": "/v2/private/position/list",
    //        "Parameter": {
    //          "symbol": {
    //            "Required": false
    //          }
    //        },
    //        "Result": "Position"
    //      },
    //      "Margin": { //balance is in positiondto
    //        "Url": "/v2/private/position/list",
    //        "Parameter": {
    //          "symbol": {
    //            "Required": false
    //          }
    //        },
    //        "Result": "Margin"
    //      },
    //      "Leverage": {
    //        "Url": "/user/leverage",
    //        "Result": "Leverage"
    //      },
    //      "WalletFund": {
    //        "Url": "/open-api/wallet/fund/records",
    //        "Result": "WalletHistory"
    //      },
    //      "WalletWithdraw": {
    //        "Url": "/open-api/wallet/withdraw/list",
    //        "Result": "WalletHistory"
    //      }
    //      //"Identity": {
    //      //  "Url": "/open-api/api-key",
    //      //  "Result": "ApiKey"

    //    },
    //    "Post": {
    //      "PlaceOrder": {
    //        "Url": "/v2/private/order/create",
    //        "Parameter": {
    //          "market": "Symbol",
    //          "side": "OrderSide",
    //          "price": "Price",
    //          "type": "OrderType",
    //          "size": "OrderQty",
    //          "reduceOnly": "ReduceOnly",
    //          "ioc": "ImmediateOrCancel",
    //          "postOnly": "PostOnly",
    //          "clientId": "ClOrdId"
    //        },
    //        "Result": "Order"
    //      },

    //      //paramer: side[Required], symbol[Required], order_type[Required], qty[Required], price[Required with Type limit], time_in_force[Required], reduce_only, order_link_id
    //      "UpdateOrder": {
    //        "Url": "/open-api/order/replace",
    //        "Parameter": {
    //          "side": {
    //            "Domain": "OrderSide",
    //            "Type": "OrderSide",
    //            "Required": true
    //          },
    //          "symbol": {
    //            "Domain": "Symbol",
    //            "Required": false
    //          }
    //        },
    //        "Result": "Order"
    //      }, //Parameter:
    //      "CancelAllOrder": {
    //        "Url": "/v2/private/order/cancelAll",
    //        "Parameter": {
    //          "symbol": {
    //            "Required": false
    //          }
    //        },
    //        "Result": "Order"
    //      }, //Parameter:  symbol[Required]
    //      "CancelOrder": {
    //        "Url": "/v2/private/order/cancel", //paramer: symbol[Required], order_id, order_link_id
    //        "Parameter": {
    //          "symbol": {
    //            "Required": true
    //          },
    //          "orderid": {
    //            "Required": true
    //          }
    //        },
    //        "Result": "Order"
    //      },
    //      "Leverage": {
    //        "Url": "/user/leverage/save",
    //        "Parameter": {
    //          "symbol": {
    //            "Required": true
    //          },
    //          "leverage": {
    //            "Required": true
    //          }
    //        },
    //        "Result": "Leverage"
    //      }
    //    } //Parameter: symbol[Required], leverage[Required]
    //  }
    //}
  }
} //EndBybit
 
